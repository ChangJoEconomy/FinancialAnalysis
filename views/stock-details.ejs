<link rel="stylesheet" href="/css/stock-details.css">

<div class="detail-container">
    <!-- 주식 기본 정보 헤더 -->
    <div class="stock-header">
        <div class="stock-basic-info">
            <h1 class="stock-name"><%= stock.name %></h1>
            <div class="stock-meta">
                <span class="stock-code"><%= stock.code %></span>
                <span class="stock-market">
                    <span class="market-badge"><%= stock.market %></span>
                </span>
                
                <!-- 내 종목 추가/제거 버튼 -->
                <% if (user) { %>
                    <% if (isFavorite) { %>
                        <button id="favoriteBtn" class="favorite-btn remove compact" onclick="toggleFavoriteStock(false)">
                            <i class="fas fa-star"></i> 제거
                        </button>
                    <% } else { %>
                        <button id="favoriteBtn" class="favorite-btn add compact" onclick="toggleFavoriteStock(true)">
                            <i class="far fa-star"></i> 추가
                        </button>
                    <% } %>
                <% } %>
            </div>
        </div>
        
        <div class="stock-right-section">
            <!-- 현재가 정보 -->
            <div class="price-info">
                <div class="current-price">
                    <%= stock.currentPrice.toLocaleString() %>원
                </div>
                <div class="price-change <%= stock.changeRate >= 0 ? 'positive' : 'negative' %>">
                    <span class="change-amount">
                        <%= stock.changeRate >= 0 ? '+' : '' %>
                        <%= stock.changeAmount.toLocaleString() %>원
                    </span>
                    <span class="change-rate">
                        (<%= stock.changeRate >= 0 ? '+' : '' %><%= stock.changeRate.toFixed(2) %>%)
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- 주식 차트 -->
    <div class="chart-section">
        <h2>주가 차트</h2>
        <div class="chart-container">
            <canvas id="stockChart" width="800" height="400"></canvas>
        </div>
    </div>

    <!-- 재무 정보 섹션 -->
    <div class="financial-section">
        <div class="financial-header-section">
            <h2>재무 정보</h2>
            <% if (user && presets && presets.length > 0) { %>
                <div class="preset-selector">
                    <label for="presetSelect">분석 프리셋:</label>
                    <select id="presetSelect" onchange="changePreset()">
                        <% 
                            let sortedPresets = presets.slice();
                            if (defaultPresetName) {
                                sortedPresets = [
                                    ...presets.filter(p => p.preset_name === defaultPresetName),
                                    ...presets.filter(p => p.preset_name !== defaultPresetName)
                                ];
                            }
                            sortedPresets.forEach(preset => { %>
                            <option value="<%= preset.preset_name %>" 
                                    <%= preset.preset_name === defaultPresetName ? 'selected' : '' %>>
                                <%= preset.preset_name %>
                            </option>
                        <% }) %>
                    </select>
                </div>
            <% } %>
        </div>
        <div class="financial-grid">

            <!-- 시가총액 -->
            <div class="financial-item">
                <div class="financial-header">
                    <span class="financial-label">시가총액</span>
                    <div class="signal-light" data-metric="marketCap" data-value="<%= stock.financials.marketCap %>"></div>
                </div>
                <div class="financial-value">
                    <% 
                        const marketCap = stock.financials.marketCap;
                        const trillion = 1_000_000_000_000;
                        const hundredMillion = 100_000_000;
                        let displayCap = '';
                        if (marketCap >= trillion) {
                            displayCap = Math.floor(marketCap / trillion) + '조 ';
                            const rest = Math.floor((marketCap % trillion) / hundredMillion);
                            if (rest > 0) displayCap += rest + '억';
                        } else if (marketCap >= hundredMillion) {
                            displayCap = Math.floor(marketCap / hundredMillion) + '억';
                        } else {
                            displayCap = marketCap.toLocaleString() + '원';
                        }
                    %>
                    <%= displayCap %>
                </div>
                <div class="financial-desc">
                    <%= stock.financials.marketCap.toLocaleString() %>원
                </div>
            </div>

            <!-- 당기순이익 성장률 -->
            <div class="financial-item">
                <div class="financial-header">
                    <span class="financial-label">당기순이익 성장률</span>
                    <div class="signal-light" data-metric="netIncomeGrowth" data-value="<%= stock.financials.netIncomeGrowth %>"></div>
                </div>
                <div class="financial-value">
                    <% 
                        const netIncomeGrowth = stock.financials.netIncomeGrowth;
                        let netIncomeGrowthDisplay;
                        if (netIncomeGrowth === null || netIncomeGrowth === undefined) {
                            netIncomeGrowthDisplay = '데이터 없음';
                        } else if (Number(netIncomeGrowth) === -Infinity) {
                            netIncomeGrowthDisplay = '적자 지속';
                        } else if (!isFinite(netIncomeGrowth)) {
                            netIncomeGrowthDisplay = '흑자 전환';
                        } else {
                            netIncomeGrowthDisplay = (netIncomeGrowth >= 0 ? '+' : '') + Number(netIncomeGrowth).toFixed(1) + '%';
                        }
                    %>
                    <%= netIncomeGrowthDisplay %>
                </div>
                <div class="financial-desc">
                    <% if (stock.financials.recentNetIncome !== null && stock.financials.recentNetIncome !== undefined && stock.financials.recentNetIncomeYear) { %>
                        <% 
                            const year = stock.financials.recentNetIncomeYear;
                            const ni = Number(stock.financials.recentNetIncome);
                            const absNi = Math.abs(ni);
                            const trillion = 1_000_000_000_000;
                            const hundredMillion = 100_000_000;
                            let displayNI = '';
                            if (absNi >= trillion) {
                                displayNI = Math.floor(absNi / trillion) + '조';
                                const rest = Math.floor((absNi % trillion) / hundredMillion);
                                if (rest > 0) displayNI += rest + '억';
                            } else if (absNi >= hundredMillion) {
                                displayNI = Math.floor(absNi / hundredMillion) + '억';
                            } else {
                                displayNI = absNi.toLocaleString() + '원';
                            }
                            if (ni < 0) displayNI = '-' + displayNI;
                        %>
                        <%= year %>년 당기순이익 <%= displayNI %>
                    <% } else { %>
                        데이터 없음
                    <% } %>
                </div>
            </div>

            <!-- PER -->
            <div class="financial-item">
                <div class="financial-header">
                    <span class="financial-label">PER</span>
                    <div class="signal-light" data-metric="per" data-value="<%= stock.financials.per %>"></div>
                </div>
                <div class="financial-value">
                  <%= (stock.financials.per !== null && stock.financials.per !== undefined && !isNaN(Number(stock.financials.per)))
                      ? Number(stock.financials.per).toFixed(1)
                      : '데이터 없음' %>
                </div>
                <div class="financial-desc">현재 시가총액 기준</div>
            </div>

            <!-- 부채비율 -->
            <div class="financial-item">
                <div class="financial-header">
                    <span class="financial-label">부채비율</span>
                    <div class="signal-light" data-metric="debtRatio" data-value="<%= stock.financials.debtRatio %>"></div>
                </div>
                <div class="financial-value">
                  <% if (stock.financials.debtRatio === null || stock.financials.debtRatio === undefined || isNaN(Number(stock.financials.debtRatio))) { %>
                    데이터 없음
                  <% } else { %>
                    <%= Number(stock.financials.debtRatio).toFixed(1) %>%
                  <% } %>
                </div>
                <div class="financial-desc">
                  <% if (stock.financials.totalDebt && stock.financials.debtYear) { %>
                    <% 
                      const year = stock.financials.debtYear;
                      const debt = Number(stock.financials.totalDebt);
                      const trillion = 1_000_000_000_000;
                      const hundredMillion = 100_000_000;
                      let displayDebt = '';
                      if (debt >= trillion) {
                        displayDebt = Math.floor(debt / trillion) + '조 ';
                        const rest = Math.floor((debt % trillion) / hundredMillion);
                        if (rest > 0) displayDebt += rest + '억';
                      } else if (debt >= hundredMillion) {
                        displayDebt = Math.floor(debt / hundredMillion) + '억';
                      } else {
                        displayDebt = debt.toLocaleString() + '원';
                      }
                    %>
                    <%= year %>년 총부채 <%= displayDebt %>
                  <% } else { %>
                    데이터 없음
                  <% } %>
                </div>
            </div>

            <!-- 당좌비율 -->
            <div class="financial-item">
                <div class="financial-header">
                    <span class="financial-label">당좌비율</span>
                    <div class="signal-light" data-metric="quickRatio" data-value="<%= stock.financials.quickRatio %>"></div>
                </div>
            <div class="financial-value">
                <% if (stock.financials.quickRatio === null || stock.financials.quickRatio === undefined || isNaN(Number(stock.financials.quickRatio))) { %>
                    데이터 없음
                <% } else { %>
                    <%= Number(stock.financials.quickRatio).toFixed(2) %>배
                <% } %>
            </div>
            <div class="financial-desc">유동성 지표</div>
            </div>

            <!-- 시가배당률 -->
            <div class="financial-item">
                <div class="financial-header">
                    <span class="financial-label">시가배당률</span>
                    <div class="signal-light" data-metric="dividendYield" data-value="<%= stock.financials.dividendYield %>"></div>
                </div>
            <div class="financial-value">
                <% if (stock.financials.dividendYield === null || stock.financials.dividendYield === undefined || isNaN(Number(stock.financials.dividendYield))) { %>
                    데이터 없음
                <% } else { %>
                    <%= Number(stock.financials.dividendYield).toFixed(2) %>%
                <% } %>
            </div>
            <div class="financial-desc">
                <% if (stock.financials.dividendYield === null || stock.financials.dividendYield === undefined || isNaN(Number(stock.financials.dividendYield))) { %>
                    최근 3년이내 배당기록 없음
                <% } else { %>
                    <%= stock.financials.dividendYear %> 배당금: ₩<%= stock.financials.dividend.toLocaleString() %>
                <% } %>
            </div>
            </div>

        </div>
    </div>

    <!-- AI 분석 섹션 -->
    <div class="ai-analysis-section">
        <div class="ai-header">
            <h2>AI 주식 분석</h2>
            <p class="ai-description">이 주식에 대해 궁금한 점을 AI에게 질문해보세요</p>
            <p class="ai-description">ex) 동종 업계 대비 어떤 메리트가 있어?</p>
            <p class="ai-description">ex) 이 주식을 사면 안 되는 이유 3가지를 알려줘</p>
        </div>
        
        <div class="chat-container">
            <div class="chat-messages" id="chatMessages">
                <div class="ai-message">
                    <div class="message-content">
                        <p>안녕하세요! <%= stock.name %>에 대해 궁금한 점이 있으시면 언제든 질문해주세요. 재무정보, 투자 전망, 업계 동향 등 다양한 주제로 대화할 수 있습니다.</p>
                    </div>
                </div>
            </div>
            
            <div class="chat-input-container">
                <div class="input-wrapper">
                    <textarea id="chatInput" placeholder="<%= stock.name %>에 대해 질문하세요..." rows="2"></textarea>
                    <button id="sendButton" onclick="sendMessage()">
                        <i class="fas fa-paper-plane"></i>
                        전송
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // 서버에서 전달받은 차트 데이터를 JavaScript 변수로 설정
    window.stockChartData = <%- JSON.stringify({
        labels: stock.chartData ? stock.chartData.map(item => item.date) : [],
        prices: stock.chartData ? stock.chartData.map(item => item.price) : []
    }) %>;
    window.stockCurrency = '<%= stock.currency %>';
    
    // stock 데이터를 안전하게 전역 변수로 설정
    window.stockData = <%- JSON.stringify(stock) %>;

    // 프리셋 데이터를 JavaScript 변수로 설정
    <% if (user && presets) { %>
        window.presets = <%- JSON.stringify(presets) %>;
        window.defaultPresetName = '<%= defaultPresetName %>';
    <% } else { %>
        window.presets = [];
        window.defaultPresetName = null;
    <% } %>

    // 신호등 색상 결정 함수
    function getSignalColor(value, metric, preset) {
        if (metric === 'dividendYield') { // 시가배당률만 예외적으로 데이터없음(안주면) red 처리
            if (value === null || value === undefined || isNaN(parseFloat(value))) {
                return 'red';
            }
        } else { // 데이터 없음
            if (!preset || value === null || value === undefined || isNaN(parseFloat(value))) {
                return 'gray';
            }
        }

        const numValue = parseFloat(value);

        switch (metric) {
            case 'marketCap':
                if (numValue > preset.marketCap_warning * 100000000) return 'red';
                if (numValue > preset.marketCap_danger * 100000000) return 'orange';
                if (numValue > preset.marketCap_caution * 100000000) return 'yellow';
                return 'green';
            
            case 'netIncomeGrowth':
                if (numValue < preset.netIncome_warning) return 'red';
                if (numValue < preset.netIncome_danger) return 'orange';
                if (numValue < preset.netIncome_caution) return 'yellow';
                return 'green';
            
            case 'per':
                if (numValue < 0 || numValue > preset.per_warning) return 'red'; // PER은 음수는 자동 경고
                if (numValue > preset.per_danger) return 'orange';
                if (numValue > preset.per_caution) return 'yellow';
                return 'green';
            
            case 'debtRatio':
                if (numValue > preset.debt_warning) return 'red';
                if (numValue > preset.debt_danger) return 'orange';
                if (numValue > preset.debt_caution) return 'yellow';
                return 'green';
            
            case 'quickRatio':
                if (numValue < preset.quick_warning) return 'red';
                if (numValue < preset.quick_danger) return 'orange';
                if (numValue < preset.quick_caution) return 'yellow';
                return 'green';
            
            case 'dividendYield':
                if (numValue < preset.dividend_warning) return 'red';
                if (numValue < preset.dividend_danger) return 'orange';
                if (numValue < preset.dividend_caution) return 'yellow';
                return 'green';
            
            default:
                return 'gray';
        }
    }

    // 신호등 업데이트 함수
    function updateSignalLights(presetName) {
        if (!window.presets || window.presets.length === 0) return;
        
        const preset = window.presets.find(p => p.preset_name === presetName);
        if (!preset) return;

        // 모든 신호등 요소를 찾아서 업데이트
        const signalLights = document.querySelectorAll('.signal-light[data-metric]');
        signalLights.forEach(light => {
            const metric = light.dataset.metric;
            const value = light.dataset.value;
            // 기존 색상 클래스 제거
            light.classList.remove('green', 'orange', 'red', 'gray', 'yellow');
            // 새로운 색상 클래스 추가
            const color = getSignalColor(value, metric, preset);
            light.classList.add(color);
            // 부모 .financial-item에 data-signal 속성 부여
            const item = light.closest('.financial-item');
            if (item) {
                item.setAttribute('data-signal', color);
            }
        });
    }

    // 프리셋 변경 함수
    function changePreset() {
        const select = document.getElementById('presetSelect');
        const selectedPreset = select.value;
        updateSignalLights(selectedPreset);
    }

    // 페이지 로드 시 기본 프리셋으로 신호등 설정
    document.addEventListener('DOMContentLoaded', function() {
        if (window.defaultPresetName) {
            updateSignalLights(window.defaultPresetName);
        }
        // llm
        
        // 텍스트 영역 자동 크기 조정 개선
        const chatInput = document.getElementById('chatInput');
        if (chatInput) {
            chatInput.addEventListener('input', function() {
                this.style.height = 'auto';
                const max = parseInt(window.getComputedStyle(this).maxHeight) || 80;
                if (this.scrollHeight > max) {
                    this.style.height = max + 'px';
                    this.style.overflowY = 'auto';
                } else {
                    this.style.height = this.scrollHeight + 'px';
                    this.style.overflowY = 'hidden';
                }
            });
            // Enter 키로 전송 (Shift+Enter는 줄바꿈)
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        }
    });

    // llm 기능
    // 메시지 전송 함수
    function sendMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        
        if (!message) return;
        
        // 사용자 메시지 추가
        addMessage(message, 'user');
        input.value = '';
        input.style.height = 'auto';
        
        // 전송 버튼 비활성화
        const sendButton = document.getElementById('sendButton');
        sendButton.disabled = true;
        sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 전송 중...';
        
        // AI 응답 요청
        fetch('/api/stock-chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message,
                stock: window.stockData
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                addMessage(data.response, 'ai');
            } else {
                addMessage('죄송합니다. 현재 AI 서비스에 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.', 'ai');
            }
        })
        .catch(error => {
            console.error('Chat error:', error);
            addMessage('네트워크 오류가 발생했습니다. 잠시 후 다시 시도해주세요.', 'ai');
        })
        .finally(() => {
            // 전송 버튼 활성화
            sendButton.disabled = false;
            sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> 전송';
        });
    }

    // 메시지 추가 함수
    function addMessage(message, type) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = type === 'user' ? 'user-message' : 'ai-message';
        let html = '';
        if (type === 'ai') {
            // 마크다운 스타일 적용: **굵게**, *기울임*, 리스트 등 지원
            html = `<div class="message-content">${renderMarkdown(message)}</div>`;
        } else {
            html = `<div class="message-content"><p>${message.replace(/\n/g, '<br>')}</p></div>`;
        }
        messageDiv.innerHTML = html;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // 간단한 마크다운 렌더링 함수 (굵게, 기울임, 리스트, 줄바꿈)
    function renderMarkdown(text) {
        if (!text) return '';
        let html = text
            // **굵게**
            .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
            // *기울임*
            .replace(/\*(.+?)\*/g, '<em>$1</em>');

        // 1. 줄 단위로 분리
        const lines = html.split(/\r?\n/);
        let result = '';
        let inList = false;
        lines.forEach((line, idx) => {
            const isList = /^\s*\* (.+)/.test(line);
            const isBold = /^\s*<strong>.*<\/strong>\s*$/.test(line);
            if (isList) {
                if (!inList) {
                    // 리스트 시작 전 단락 닫기
                    result += '<ul>';
                    inList = true;
                }
                // 리스트 항목 추가
                result += line.replace(/^\s*\* (.+)/, '<li>$1</li>');
            } else {
                if (inList) {
                    result += '</ul>';
                    inList = false;
                }
                if (isBold) {
                    // 굵은 제목은 단락으로
                    result += `<p>${line}</p>`;
                } else if (line.trim() === '') {
                    // 빈 줄은 단락 구분
                    result += '';
                } else {
                    // 일반 텍스트는 <p>
                    result += `<p>${line}</p>`;
                }
            }
        });
        if (inList) result += '</ul>';
        // <p> 단락이 중복되지 않게 정리
        result = result.replace(/(<p>\s*)+/g, '<p>').replace(/(\s*<\/p>)+/g, '</p>');
        return result;
    }

    // 내 종목 추가/제거 AJAX
    function toggleFavoriteStock(add) {
        const btn = document.getElementById('favoriteBtn');
        btn.disabled = true;
        fetch('/my-stocks', {
            method: add ? 'POST' : 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                stock_code: '<%= stock.code %>',
                stock_name: '<%= stock.name %>',
                stock_market: '<%= stock.market %>'
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.message || '오류가 발생했습니다.');
                btn.disabled = false;
            }
        })
        .catch(() => {
            alert('서버 통신 오류');
            btn.disabled = false;
        });
    }
</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/js/detail.js"></script>
